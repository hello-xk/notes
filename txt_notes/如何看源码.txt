获得一份源码，如何高效率地看明白源码呢？

1，首先不要尝试到处看，这虽然会遇到一些意外的函数或明白一些意外的处理，但是这样效率不高。现在要寻求的是高效率的做法。换言之，是一种无论面对什么源码，都相对高效率的一般做法。

2，获得一份源码，首先要看开发文档。
	开发文档就是教初涉者如何  搭建环境，构建工程，了解工程，修改源码。
	所以，第一件事是看一下开发文档。这里也有注意事项：

	1，如果有教程，不要跳过任何一步，也不要自以为是地将步骤换转顺序。因为第一次部署，很多时候会出现问题，而如果在配置环境过程无视或忽视别人成功搭建的教程，会适得其反，因为这样在出错的时候，将会无法跟踪到出错的步骤而导致进退两难。下一步是执行不了了，因为已经出错。前面的有错误，但是因为没有按照步骤，可能需要重新搭建环境。好的时候，这不花费很多时间，坏的时候，就相当于之前所有做的事情都白做了！！这样还哪有效率可言。（曾经因为自以为自己的操作和教程的操作效果是一致的，就懒得看教程，按照自己的做法做了，结果就是因为这样而导致环境搭载失败！）
		所以，切记如果有教程，请一定按照教程的步骤去做。当成功搭建过一次后，才可以考虑按照自己的做法去做。

	2，遇到错误，先看文档，先看文档！看是不是跳过了某些段落，某些步骤！！然后才Google。Google，可能会很快找到解决方案。但是前提是按照文档做了！！否则有时候是因为没有按照文档来做才导致的错误，Google到的解决可能不适合当前的文档教程！！

	3，环境搭建完成后，就是看源码部分。同样道理，先看文档。对于函数，需要查看函数体头部的函数作用注释。为什么呢？这是很显然的，如果注释没用，它也不会放在那，而且，注释的作用是什么呢，就是让不明白的人明白。所以，看源码时，先看注释很重要。看源码注意点：
		1，看程序，先从程序入口看起，看函数，先从函数入口看起。
		2，有错误，有文档先看文档，无说明，才Google。

总结：
	1，有文档时，先看文档是优先级最高的！！是效率最快的。
	2，有错误时，可以立即Google，因为错误不一定是源码错误，而是编译选项，一些特殊的配置造成的问题。这种问题，查看源码，查看文档什么的效率反而很低！几乎无法解决。这种问题必须借助网上的一些帖。就好比当初编译多线程，含有math.h等源码时，需要附带编译参数，这些只得靠Google，而且越快浪费的时间就越少。所以，优先Google对于源码修改等效率会快一点。而搭建环境时，教程优先是比较快一点。
	3，在网上查看相关技术，笔记文档也是一个高效的方法，不过不要只看不做。边看边尝试修改是一个更好的了解方式。
