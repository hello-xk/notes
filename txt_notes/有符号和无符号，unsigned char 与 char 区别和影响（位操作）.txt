有符号和无符号，unsigned char 与 char 区别和影响(位操作)：

首先，表示一个字节的类型有：
uint8_t
unsigned char
__u8
Uint8

其次，有符号和无符号的区别：
0，首先要知道，计算机内，都用补码表示值。正数不变，负数取反+1。
1，有符号数，最高位表符号位： 1为负，0为正。其余的是有效数值位。1000 0000是-128  （000 0000取反+1）
2，无符号数，所有位均为有效数值位。1000 0000是128 
3，有符号和无符号只是表示如何看待内存的值。如，内存1000 0000，如果你将其声明或强制转换为有符号，则是负数，是-128，如果你将其声明或强制转换为无符号数，则是正数，是128. 但是，无论你怎么看它，它都是1000 0000。你只要知道它代表的是什么，那么，你可以将其放在任何类型的变量里，只要最后，你强制转换为你知道的那种类型即可。比如： 你知道你的数值是正数128，那么1000 0000 你先用int i来存储，然后用char来存储，再转回unsigned char，再转回uint8_t，只要最后你将其转换为无符号数，它的值就仍旧是128.但是，转换过程，一定注意，有的转换会扩展或截取数值！这样处理后，数据源就发生了改变！（一般混用类型的后果，就是不知道哪里将数据源改变了，进而最后转回来的时候，值不对）
4，明白以上后：
    1，无符号之间，可以随意类型间赋值，只不过，大范围赋值小范围时，可能会被截断。（截取最低一个字节通常用这种方法，直接赋值给一个unsigned char变量）
    2，有符号之间，这是普遍的赋值，主要要考虑上溢和下溢的问题。（如果A的有效值范围在类型B/C/D等范围内，则可以放心用BCD任意一种存储，且相互赋值）
    3，有符号和无符号之间，主要考虑上溢和下溢的问题。（同上，只要都在类型的值范围内，则可以相互赋值）
    
    
    链：
    char a=0xFF; unsinged char b=a; int c=b; double d=c; char e=d; 输出e仍旧是0xFF。这就是无论类型怎样变，内存没有变。
    printf("%d", (int)e); printf("%c", (unsigned char)e); printf("%02X", (unsigned char)e);
    
    比如： 如果目前一个值范围是： 0x00 - 0x0F
    那么，它可以用char, unsigned char, int 等等存储，且可以相互赋值而不害怕数值被改变。
    
    如果，值范围是: 0x00 - 0xFF
    那么，它可以用char, unsigned char, int 等等存储，但是，它们可以相互赋值，数据不会丢失，但是效果不一致：
    0xFF的char，它输出是-1
    0xFF的unsigned char，它的输出是255 
    0xFF的int，它的输出是255
    无论它们用什么类型的变量存储，只要我们(unsigned char)强制转换，我们就能得到0xFF。它的内存的值始终是0xFF而没有改变，所以，char 和 unsigned char 都可以作为网络二进制流。
    
    如果，值范围是： 0x00 - 0x1FF 
    那么，它不能用char存储，否则会丢失数据。
    0x1FF的char，被截断为0xFF，上面的那条链就不生效。

5，从4可以看出，unsinged char 和 char 都可以表示一个字节。只不过，用char表示时，输出%d 并不等于 赋给它的值。但是用于传输数据是没有影响的，内存里的数据是一致的。

《下面来自 现代C.txt》
3，输出一个内存的16进制，出现FFFFFFE0，为什么呢？我想输出E0.
   你是不是用了char？ 这关键是输出的类型。
   printf("%x ", (char)buf[i]); //输出有时是FFFFFFXX，有时是XX，为什么呢？ 
   原因： 中文一般都是AX，左边是AX～FX时，已经是1XXX XXXX，如果你将其看作有符号char，那么，其实这是一个负数。但是输出16进制时，怎么会有正负之分呢？gcc编译的输出结果会将其最高位的1作为符号位，然后输出FFFF FFXX（最后的XX是1XXX XXXX的16进制，前面的FFF只是显示这个是一个负值）。所以，如果是0XXX XXXX的char值，其实是没有前面的FFFFF的。如1A，输出时，其实就是1A，不会有前面的FFFF。所以，这种char输出，如果是0XXX XXXX ～ 1XXX XXXX，输出是XX，没有前面的FFFF，如果是1XXX XXXX ～ FFFF FFFF间的值，则会输出是FFFF FFXX，前面会有多个FFFFF。
   修复：
   printf("%02x ", (unsigned char)buf[i]); //这个显示转换表示把内存看作无符号char，那么，都不会输出前面的FFFFF。
   
   这个输出的问题就是这样。但是其内存仍旧只是XX这个字节而已。

附录：
负数原码变补码:符号位不变,其他位取反加1 

负数补码变原码:符号位不变,其他位取反加1 

正数:原码=反码=补码





