多线程的线程函数只接受一个void *参数，所以，多线程要接受多个参数，需要构建一个结构体。

二，多线程内实现状态机。
    //多线程线程内，要线程持久，必须一个while。这是不变的。
    while(1) {

    }

    //增加顺序结构：  顺序的实现有多种实现。这和状态机很相似。
	实现需要注意的问题：
	1，如果使用一个状态一个子函数的形式，数据传递是麻烦的地方。每个状态都可能需要传入一系列相同的附加数据。
	2，步骤跳转的实现。

	方式1：	switch 分支
	while(1) {
	switch(状态)
		case 1:
		//状态1处理函数。失败，继续，成功，改为状态2; break;
		case 2:
		//状态2处理函数。失败，继续，成功，改为状态2; break;
		case 3:
		//状态3处理函数。break;
	}
	
	方式2：  函数指针
	*do = step_1;
	while(1) {
		ret = do(&data);
		if (ret == 0)
			*do = data->next_do_function
    }
	int step_1(void *data) {...}
 	int step_2(void *data) {...}
	//1，要求，每一步的参数必须一致。
	//2，成功时，才将函数指针指向下一步的操作函数。函数指针的赋值有两种方式： 一在步骤函数内；二在步骤函数外。
	//缺点： 数据传递.step_1 step_2等步骤可能需要一些基础数据，这些数据都要通过参数进行传递，一般而言，都需要封装在同一个结构体内。这个结构体里其中一个属性就是下一步do的函数指针，以便修改下一步的操作。


状态机和顺序结构是不同的：
顺序结构是： 步骤1 -> 步骤2 -> 步骤3
状态机是根据状态来进行该状态的操作。比如，在状态2时执行一个操作，操作完成后，可能是状态1，也可能是状态3.然后跳转的目标可能是状态1的处理函数，也可能是状态2的处理函数。甚至，它也可以依旧为当前状态。这和顺序结构不同，它的结构是这样的：
			判断当前状态
     |               |            |
	状态1           状态2        状态3
  状态1处理函数	状态2处理函数  状态3处理函数
   切换状态		   切换状态     切换状态
状态可能是并列的，也可能是渐进的。
很明显，是没有顺序的硬性要求！！若非要找关系，那就是顺序结构是状态机的一个特例。换言之，状态机的实现方式可以用于实现顺序结构！！！

顺序结构是，一定要顺序执行，前一个步骤没完成，不能进行下一步操作。换言之，最后一个操作要求前面的操作都成功执行！
顺序结构在验证，保证方面常用。如，确保消息已到达才进行下一步，验证成功才进入下一步等等。
