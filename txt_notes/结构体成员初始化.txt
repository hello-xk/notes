结构体成员的初始化：
struct book {
    char *name;
    char *date;
}

一般有2种方式：
1，在声明时初始化：
    struct book book = {NULL}; 这样做是可以将成员都初始化为NULL。但是，如果里面不是NULL，而是一个字符串abc，那么，abc只在其中一个成员，其他成员则被初始化为NULL。换言之，这种对每个成员都有效的，只支持NULL，如果不为NULL，则只有其中一个被赋值，其他自动被赋值为NULL。
2，逐个赋值：
    struct book book = {.name = NULL, .date = NULL};
    这种是绝对正确的。
3，在使用过程赋值：
    struct book book;
    book = (struct book){NULL}; 这样做同初始化。对NULL有效，对字符串无效。
    
标准是： 如果结构体初始化时，括号里的是0（NULL其实也是0），则是将结构体内存块初始化为0，如果是非0，则结构体第一个成员是该赋值，其它成员则不确定，看编译器（gcc是会将其他成员赋值为0）。所以，上面看到的测试结果就是这样。赋值为NULL，则每个成员为NULL，赋值为abc，则第一个成员是abc，其他为NULL（这是gcc编译器的处理）。

注意，是结构体初始化时！！其他情况不确定，所以安全起见，其他方式就不要乱用。

{NULL}这种方式要只用于初始化时，其他情况，则必须使用逐个赋值！
