system和popen的区别：
popen() 可以在调用程序和POSIX shell /usr/bin/sh 要执行的命令之间创建一个管道（请参阅sh-posix(1) ）。
popen() 的参数是指向以空字符结尾的字符串的指针，这些字符串分别包含一个shell 命令行和一个I/O 模式，此
模式可以是进行读取的r ，或进行写入的w 。
popen() 可返回一个流指针，这样，当I/O 模式为w 时，便可以通过写入文件stream 来写入到命令的标准输入；
当I/O 模式为r 时，通过从文件stream 读取数据，从命令的标准输出读取数据。
popen() 打开的流应由pclose() 关闭，这需要等待终止关联的进程，然后返回命令的退出状态。
因为打开的文件是共享的，所以类型为r 的命令可用作输入过滤器，类型为w 的命令可用作输出过滤器。

system() 可执行由command 指向的字符串指定的命令。已执行命令的环境就如同使用fork() （请参阅fork(2) ）
创建了一个子进程，子进程按以下方式通过调用execl() （请参阅exec(2) ）来调用sh-posix(1) 实用程序：
execl("/usr/bin/sh", "sh", "-c", command, 0);
system() 在等待命令终止时将忽略SIGINT 和SIGQUIT 信号，同时阻塞SIGCHLD 信号。如果这会导致应用程
序错过一个终止它的信号，则应用程序应检查system() 的返回值；如果由于收到某个信号而终止了命令，应用程
序应采取一切适当的措施。
system() 不影响除自己创建的一个或多个进程以外的调用进程的任何子进程的终止状态。
在子进程终止之前， system() 不会返回。

简而言之：
相同： 都会在执行命令的时候阻塞。
区别： 如果system执行的是后台进程，则system执行完后就会立即返回，后台进程仍旧在跑，而且该后台进程的输出会输出到调用system的窗口。而popen执行一个后台进行，则一直等待后台进程的结束，因为后台进程的输出还没结束！
举例： system("sudo mentohust -u%s -p%s -n%s -b2 -l1"); -b2是指后台运行，但会一直有输出。
       popen("sudo mentohust -u%s -p%s -n%s -b2 -l1", "r"); -b2是指后台运行，但会一直有输出。
       以上区别是，system会立即结束，然后后台进程的输出会输出到当前主进程的窗口。
       popen会一直卡着，没有任何输出，估计是，因为它的输出还没有结束，因此管道还不能读，一直等待管道输出。
       如果改为popen("sudo mentohust -u%s -p%s -n%s -b1 -l1", "r"); -b1是指后台运行，但没有输出。这样，popen就能立即返回！！！！
       
       可见，popen的返回条件是，执行的命令已经没有任何输出了，即你用shell执行它，它不会再往shell窗口输出内容它就返回。
       system不同，system执行的命令，就像在shell里直接执行一样，但会等待返回值。所以，你用shell执行，它是后台的，那么shell会立即返回，只是shell窗口还会有内容输出。
       可见，system的返回条件是，程序进入后台，而不管它有没有输出，即你用shell执行它，它立即返回，即使窗口会时有一些log输出，这时，使用system会立即返回，而使用popen则会因为输出还没有结束而一直阻塞。可见，用popen执行，是没有前后台之分的，只有还占不占用输出窗口。没有占用时返回，有占用时一直在阻塞。
       system执行前台进程时，如果执行的命令会阻塞，则会一直阻塞，直到执行结束。所以，如果执行的是后台进行，因为后台进程会立即结束，所以会立即返回。
       比如，system("sudo ping www.baidu.com");会一直等待结束！！
       
       
       
       
       
       
       
       
       
       
       
       
       
       
