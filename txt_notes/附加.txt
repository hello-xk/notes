type mismatch in conditional expression
是指条件表达式 a > b ? X ： Y 表达式里，X 或 Y 不能作为true/false。
比如，struct BOOK book。 a > b ? book=get_book() : true; 那么，book是不能作为true/false返回的，所以会导致上面的提示。
修正： a > b ? book=get_book(), true : true;  
如果book是一个指针，数值等可以作为true/false判断的，那么就不会导致上诉错误。
//////////////////////////////////////////

sed:
makes backup if extension supplied: 
sed -i.bak "/^root/s/^/#/" ./sed_txt.txt
   -i直接替换，.bak先备份为bak，/^root/以root开头，s/^/#/ s替换，^行首，#替换的内容。 "s/XXXX/XXXX/"是替换。
几点说明：

1."^"代表行首，"$"代表行尾

2.'s/$/&TAIL/g'中的字符g代表每行出现的字符全部替换，如果想在特定字符处添加，g就有用了，否则只会替换每行第一个，而不继续往后找了

///////////////////////////////////////////////////////////////////////////////
定址用于决定对哪些行进行编辑。地址的形式可以是数字、正则表达式、或二者的结合。如果没有指定地址，sed将处理输入文件的所有行。
 
地址是一个数字，则表示行号；是“$"符号，则表示最后一行。例如： 
sed -n '3p' datafile
只打印第三行
 

 只显示指定行范围的文件内容，例如：

# 只查看文件的第100行到第200行
sed -n '100,200p' mysql_slow_query.log
 

地址是逗号分隔的，那么需要处理的地址是这两行之间的范围（包括这两行在内）。范围可以用数字、正则表达式、或二者的组合表示。例如：

sed '2,5d' datafile
#删除第二到第五行
sed '/My/,/You/d' datafile
#删除包含"My"的行到包含"You"的行之间的行
sed '/My/,10d' datafile
#删除包含"My"的行到第十行的内容
 

 

3.命令与选项

sed命令告诉sed如何处理由地址指定的各输入行，如果没有指定地址则处理所有的输入行。

 

3.1 sed命令

 命令	 功能
 a\	
 在当前行后添加一行或多行。多行时除最后一行外，每行末尾需用“\”续行

 c\	 用此符号后的新文本替换当前行中的文本。多行时除最后一行外，每行末尾需用"\"续行
 i\	 在当前行之前插入文本。多行时除最后一行外，每行末尾需用"\"续行
 d	 删除行
 h	 把模式空间里的内容复制到暂存缓冲区
 H	 把模式空间里的内容追加到暂存缓冲区
 g	 把暂存缓冲区里的内容复制到模式空间，覆盖原有的内容
 G	 把暂存缓冲区的内容追加到模式空间里，追加在原有内容的后面
 l	 列出非打印字符
 p	 打印行
 n	 读入下一输入行，并从下一条命令而不是第一条命令开始对其的处理
 q	 结束或退出sed
 r	 从文件中读取输入行
 !	 对所选行以外的所有行应用命令
 s	 用一个字符串替换另一个
 g	 在行内进行全局替换
 	
 w	 将所选的行写入文件
 x	 交换暂存缓冲区与模式空间的内容
 y	 将字符替换为另一字符（不能对正则表达式使用y命令）
 

3.2 sed选项

 选项	 功能
 -e	 进行多项编辑，即对输入行应用多条sed命令时使用
 -n	 取消默认的输出
 -f	 指定sed脚本的文件名
 
 
4.退出状态
sed不向grep一样，不管是否找到指定的模式，它的退出状态都是0。只有当命令存在语法错误时，sed的退出状态才不是0。
5.正则表达式元字符
 与grep一样，sed也支持特殊元字符，来进行模式查找、替换。不同的是，sed使用的正则表达式是括在斜杠线"/"之间的模式。
如果要把正则表达式分隔符"/"改为另一个字符，比如o，只要在这个字符前加一个反斜线，在字符后跟上正则表达式，再跟上这个字符即可。例如：sed -n '\o^Myop' datafile
 
 元字符	 功能	 示例
 ^	 行首定位符	 /^my/  匹配所有以my开头的行
 $	 行尾定位符	 /my$/  匹配所有以my结尾的行
 .	 匹配除换行符以外的单个字符	 /m..y/  匹配包含字母m，后跟两个任意字符，再跟字母y的行
 *	 匹配零个或多个前导字符	 /my*/  匹配包含字母m,后跟零个或多个y字母的行
 []	 匹配指定字符组内的任一字符	 /[Mm]y/  匹配包含My或my的行
 [^]	 匹配不在指定字符组内的任一字符	 /[^Mm]y/  匹配包含y，但y之前的那个字符不是M或m的行
 \(..\)	 保存已匹配的字符	 1,20s/\(you\)self/\1r/  标记元字符之间的模式，并将其保存为标签1，之后可以使用\1来引用它。最多可以定义9个标签，从左边开始编号，最左边的是第一个。此例中，对第1到第20行进行处理，you被保存为标签1，如果发现youself，则替换为your。
 &	 保存查找串以便在替换串中引用	 s/my/**&**/  符号&代表查找串。my将被替换为**my**
 \<	 词首定位符	 /\<my/  匹配包含以my开头的单词的行
 \>	 词尾定位符	 /my\>/  匹配包含以my结尾的单词的行
 x\{m\}	 连续m个x	 /9\{5\}/ 匹配包含连续5个9的行
 x\{m,\}	 至少m个x	 /9\{5,\}/  匹配包含至少连续5个9的行
 x\{m,n\}	 至少m个，但不超过n个x	 /9\{5,7\}/  匹配包含连续5到7个9的行
 
6.范例
 
6.1 p命令
命令p用于显示模式空间的内容。默认情况下，sed把输入行打印在屏幕上，选项-n用于取消默认的打印操作。当选项-n和命令p同时出现时,sed可打印选定的内容。
 
sed '/my/p' datafile
#默认情况下，sed把所有输入行都打印在标准输出上。如果某行匹配模式my，p命令将把该行另外打印一遍。

sed -n '/my/p' datafile
#选项-n取消sed默认的打印，p命令把匹配模式my的行打印一遍。
 

6.2 d命令

命令d用于删除输入行。sed先将输入行从文件复制到模式空间里，然后对该行执行sed命令，最后将模式空间里的内容显示在屏幕上。如果发出的是命令d，当前模式空间里的输入行会被删除，不被显示。

sed '$d' datafile
#删除最后一行，其余的都被显示

sed '/my/d' datafile
#删除包含my的行，其余的都被显示
 

6.3 s命令

sed 's/^My/You/g' datafile
#命令末端的g表示在行内进行全局替换，也就是说如果某行出现多个My，所有的My都被替换为You。

sed -n '1,20s/My$/You/gp' datafile
#取消默认输出，处理1到20行里匹配以My结尾的行，把行内所有的My替换为You，并打印到屏幕上。
  
sed 's#My#Your#g' datafile
#紧跟在s命令后的字符就是查找串和替换串之间的分隔符。分隔符默认为正斜杠，但可以改变。无论什么字符（换行符、反斜线除外），只要紧跟s命令，就成了新的串分隔符。
 

6.4 e选项

-e是编辑命令，用于sed执行多个编辑任务的情况下。在下一行开始编辑前，所有的编辑动作将应用到模式缓冲区中的行上。

sed -e '1,10d' -e 's/My/Your/g' datafile
#选项-e用于进行多重编辑。第一重编辑删除第1-3行。第二重编辑将出现的所有My替换为Your。因为是逐行进行这两项编辑（即这两个命令都在模式空间的当前行上执行），所以编辑命令的顺序会影响结果。
 

6.5 r命令

r命令是读命令。sed使用该命令将一个文本文件中的内容加到当前文件的特定位置上。

sed '/My/r introduce.txt' datafile
#如果在文件datafile的某一行匹配到模式My，就在该行后读入文件introduce.txt的内容。如果出现My的行不止一行，则在出现My的各行后都读入introduce.txt文件的内容。
 
6.6 w命令
sed -n '/hrwang/w me.txt' datafile
 

6.7 a\ 命令

a\ 命令是追加命令，追加将添加新文本到文件中当前行（即读入模式缓冲区中的行）的后面。所追加的文本行位于sed命令的下方另起一行。如果要追加的内容超过一行，则每一行都必须以反斜线结束，最后一行除外。最后一行将以引号和文件名结束。

sed '/^hrwang/a\
>hrwang and mjfan are husband\
>and wife' datafile
#如果在datafile文件中发现匹配以hrwang开头的行，则在该行下面追加hrwang and mjfan are husband and wife
 

6.8 i\ 命令

i\ 命令是在当前行的前面插入新的文本。

 

6.9 c\ 命令

sed使用该命令将已有文本修改成新的文本。

 

6.10 n命令

sed使用该命令获取输入文件的下一行，并将其读入到模式缓冲区中，任何sed命令都将应用到匹配行紧接着的下一行上。

sed '/hrwang/{n;s/My/Your/;}' datafile
注：如果需要使用多条命令，或者需要在某个地址范围内嵌套地址，就必须用花括号将命令括起来，每行只写一条命令，或这用分号分割同一行中的多条命令。
 
6.11 y命令
该命令与UNIX/Linux中的tr命令类似，字符按照一对一的方式从左到右进行转换。例如，y/abc/ABC/将把所有小写的a转换成A，小写的b转换成B，小写的c转换成C。
 
sed '1,20y/hrwang12/HRWANG^$/' datafile
#将1到20行内，所有的小写hrwang转换成大写，将1转换成^,将2转换成$。
#正则表达式元字符对y命令不起作用。与s命令的分隔符一样，斜线可以被替换成其它的字符。
 

6.12 q命令

q命令将导致sed程序退出，不再进行其它的处理。

sed '/hrwang/{s/hrwang/HRWANG/;q;}' datafile
 

6.13 h命令和g命令

#cat datafile
My name is hrwang.
Your name is mjfan.
hrwang is mjfan's husband.
mjfan is hrwang's wife.
  
sed -e '/hrwang/h' -e '$G' datafile
sed -e '/hrwang/H' -e '$G' datafile
#通过上面两条命令，你会发现h会把原来暂存缓冲区的内容清除，只保存最近一次执行h时保存进去的模式空间的内容。而H命令则把每次匹配hrwnag的行都追加保存在暂存缓冲区。
sed -e '/hrwang/H' -e '$g' datafile
sed -e '/hrwang/H' -e '$G' datafile
#通过上面两条命令，你会发现g把暂存缓冲区中的内容替换掉了模式空间中当前行的内容，此处即替换了最后一行。而G命令则把暂存缓冲区的内容追加到了模式空间的当前行后。此处即追加到了末尾。
 

 

7. sed脚本

sed脚本就是写在文件中的一列sed命令。脚本中，要求命令的末尾不能有任何多余的空格或文本。如果在一行中有多个命令，要用分号分隔。执行脚本时，sed先将输入文件中第一行复制到模式缓冲区，然后对其执行脚本中所有的命令。每一行处理完毕后，sed再复制文件中下一行到模式缓冲区，对其执行脚本中所有命令。使用sed脚本时，不再用引号来确保sed命令不被shell解释。例如sed脚本script：

#handle datafile
3i\
~~~~~~~~~~~~~~~~~~~~~
3,$s/\(hrwang\) is \(mjfan\)/\2 is \1/
$a\
We will love eachother forever！！ 
 
 

#sed -f script datafile
My name is hrwang
Your name is mjfan
~~~~~~~~~~~~~~~~~~~~~
mjfan is hrwang's husband.          ＃啦啦～～～
mjfan is hrwang's wife.
We will love eachother forever！！
////////////////////////////////////////////////////////////////

1、替换并输出（不修改源文件）：

sed  's/dog/cat/g' file      ##dog被替换的内容，cat替换的内容

2、备份后直接替换至源文件：

sed -i.bak 's/dog/cat/g' file

3、替换第n行到第m行：

sed 'n,ms/dog/cat/g' file  ##n、m为数字

4、替换内容xxx和***之间的内容：

sed '/A/,/B/s/dog/cat/g' file  ##替换A和B之间的内容

5、一次替换多个多个内容：

sed  -e  's/dog1/cat1/g' -e  's/dog2/cat2/g' file



这个字段的值是同事经过base64.encodestring("XXXXXX:XXXXXX")编码后得到的字符串，查看了一下python的lib doc，发现这个函数默认返回一个以"\n"结尾的字符串，这就这个问题的根本原因，replace掉其中的\n，一切就都OK了

base64.encodestring返回的字符串默认结尾带"\n"，而且产生的base64编码字符串每76个字符就会用"\n"隔开，所以最安全的方法不是strip去掉结尾的\n，而是用replace去掉其中所有的\n。为啥base64.ecodestring每76字符就换行，这个是mime协议的规定，用于email发送，具体查看mime协议吧
使用的libb64也是默认添加一个'\n'在末尾。可见，换行是正确的，加密后的字符串原本就是这样，没有好看与不好看之分。

ev_timer_again一般用于定时任务。ev_timer_again调用时，是看repeat。如果repeat是0.0，那么不会有下一次定时，again相当于执行了ev_timer_stop;ev_timer_set(&timer, 0.0, repeat);ev_timer_start;三步。所以，如果repeat是0.0，again是没有任何作用的！
而针对执行一次，就停止，再根据特定情况开启的定时器，是不适宜使用again，因为这个定时间隔是每次可能不一致的。

warning: ignoring return value of ‘system’, declared with attribute warn_unused_result [-Wunused-result]
使用if(system()); 屏蔽。

 int num = sscanf(id, "%X", &id_tmp);
与
 int num = sscanf(id, "%d", &id_tmp);
当id为“128”时，第一个读入

对于ev_timer，当start后，停止后，必须使用set，重新赋值，因为停止后，timer端超时被复位为0了，于是变为立即超时。

ubuntu忽然不出现unity的边框栏原因： 使用了错误的更新源。不同版本有不同的更新源。其实，可以在网上搜索，ubuntu不能进入桌面，或unknown session "ubuntu"的解决方案。（一开始，先将使用了错误版本的qt恢复到旧版本，使用aptitude，然后重启，于是登录不了，进而使用网上的方法，重装lightdm，ok）

终于懂得头文件和c文件的真正关系了.
  一直使用头文件和c文件,但是对于它们的关系一致不怎么清晰.
其实，头文件只是c文件的一部分。当一个c文件包含一个头文件时，头文件会被并入到该c文件，成为该c文件的一部分。所以，当在头文件里声明一个变量时，如果该头文件被引用多次，就会出现multiple definition多重定义，因为每个包含该头文件的c文件都声明了一次！ 如果在上述声明加上一个static，那么，头文件被c文件包含时，static修饰就使得该声明是文件域的声明，因此，如果包含了该头文件，而没有使用到该static变量的c文件，则会出现defined but not used，即表示该c文件都声明来一个static XXX 变量。
  可见，头文件最终成为c文件的一部分。
  
头文件里的ifndef的真正用途。日常的理解是，加了这个，整个项目就只是加载头文件一次。但是这个理解是错误的。
真正的理解是： 一个c文件包含了多个头文件，头文件还包含了其他头文件。为防止在同一个c文件里包含多个相同的头文件（同一个c文件里如果加载了相同的头文件，就表示该c文件里出现了相同的代码，必然导致重定义），于是，用ifndef宏来使得，一个c文件里的头文件依次唯一地合并到该c文件里，成为一个文件。

头文件和c文件合并成同一个文件。这个文件有该c文件能够引用的所有类型，函数。除了该c文件自身实现的函数外，其他仅是一个声明。编译只是编译该合并后的大文件。这就可以理解，为什么需要链接这步。头文件和c文件合并成一个大文件后，是独立编译的。

举个例子：
a.h
    struct book {
      char *name;
      int count;
    };
b.c
    #include a.h
    struct book book;
d.c 
    #include a.h
    struct book book;
    
编译前，b.c会和a.h合并成c文件：
    struct book {
      char *name;
      int count;
    };
    struct book book;
d.c和a.h合并成c文件：
    struct book {
       char *name;
       int count;
    };
    struct book book;
因为在c文件内的结构体是文件域的，互不干扰，编译时又是单个c文件编译，所以，其实编译后是两个互不相干的东西。
链接这一步就是将两个文件里相同的结构合并，或者说，将相同的变量，结构，函数标识符等价，于是两个c文件就建立起关系。
最后，main函数使得这些文件构建成一个整体。

所以，可以理解，为什么只应该进行声明，而不应该在头文件里进行定义。一旦进行了变量或函数的定义，一定要加static，加了static仍旧无法去掉一些warning。


static int __string_to_int(const char *string, int len) {
     static char str[10] = {0};
     printf("static str = %s len = %d\n", str, len);
     strncpy(str, string, len);
     printf("str: %s int: %d\n", str, atoi(str));
     return atoi(str);
}
这个函数的static char str[10] = {0};并不会每次都将整个缓冲区置为0，而只是第一次！！
做过测试，第二次不会将缓冲区设置为0，因为第二次不是声明并初始化，而是仅是赋值。数组不能这样赋值，所以，第二次是无效的。
但是是数值时，却可以，static int i = 0；那么每次进入都将i设为0： 第一次是声明并初始化，所以为0，第二次是赋值，将静态变量赋值为0。
可以改为：
    snprintf(str, len+1, "%s", string); //注： 使用的是len+1，而不是sizeof(str)!

注： 上面是错误的！ 对于static int a = 1; 也同样适用以上定律。记忆中测试是不变的，但是最近测试时，真的会变！！ 换言之，static的赋值只是第一次，其后都不会被重新赋值。

1，errno的设置，直接赋值即可。
2，结构体的比较，可以使用memcmp。
3，位域也有大小端：
struct aircond_locks_byte {
    uint8_t  lock_open       : 1;           //结构体的上面是内存低位
    uint8_t  lock_close      : 1;
    uint8_t  lock_cool_temp  : 1;
    uint8_t  lock_heat_temp  : 1;
    uint8_t  lock_speed      : 1;
    uint8_t  lock_swing      : 1;
    uint8_t  reserve1        : 1;
    uint8_t  reserve2        : 1;           //结构体的下面是内存高位
};
结构体的字节排序：
1，就结构体自身而言，第一个成员在低位，第二个成员在高位。即内存的左边是结构体的上面的成员.
2，就成员而言，按照成员大小端排位，即如果成员是int，则有大小端；如果是char，则没有大小端；依次类推。
对于x86的linux下，lock_open是在内存中的低位。即是第0位。而对于big-endian的机器，lock_open则是高位。

上面的都错了!!!!
对结构体而言,第一个成员就是在低位,第二个成员就是在高位!!!对于位域而言,上面位域就是低位,下面位域是高位.


唯一不受大小端影响的是字节！即unsigned char。uint8_t。等类型。赋值0A，则发出去的数据包也是0A.

1, ./configure --prefix=/usr
   gcc默认在/usr下找，而不会在/usr/local下找。因此，如果默认安装在/usr/local下，则需要加-I路径来标识。
   -L是指查找库的路径。-I是指查找头文件路径。-lXXX是指自动在-L目录下寻找libXXX.a库。也可以指定test: test.c XXX.a 这样。
   
   test: test.o $(LIB) test.o需要先编译，再编译test。

2，一般是两种情况最好抽取子函数：
1）有重复代码
2）代码本身表达不出意图，需要写段注释说明是做了什么

3，非字符串协议，不能使用'\0'作为结束符，因为数据段可能就含有。

4,
 55     timeout.tv_usec = timeout_ms % 1000 * 1000;
 56     int readlen = 0;
 57     while (readlen < FRAME_SIZE) {
 58         int len = e_uart_read(uart, buffer+readlen, FRAME_SIZE-readlen, timeout);
 59         if (len < 0)
 60             return -1;
 61         readlen += len;
 62         if (readlen == 0)
 63             return 0;
 64         if (readlen != FRAME_SIZE) {
 65             g_uart_statist.numReadFailed++;
 66             printf("failed to read the whole frame in time!\n");
 67             return -1;
 68         }
 69        
 70         /* skip invalid data */
 71         if (buffer[0] != FRAME_SYNC || buffer[1] != type) {
 72             int i;             
 73             for (i = 1; i < FRAME_SIZE; i++)
 74                 if (buffer[i] == FRAME_SYNC)
 75                     break;
 76             readlen = FRAME_SIZE - i;
 77             memmove(buffer, buffer+readlen, readlen);
 78             continue; 
 79         }
 80     }
 81     g_uart_statist.numBytesRead += FRAME_SIZE;
 82     return FRAME_SIZE;
在fd可读时，执行上面的代码，是不是有bug？？是的。 如果是事件触发，不可以在读写处调用block的函数。比如这里，如果读缓冲区不足FRAME_SIZE，则会一直卡死。

5，回归到事件触发，如果监听的是文件fd，只有执行read/write fd时才会出现事件，如果将它们改为fread/fwrite fp则不会触发事件。

6，信号的宏在signum.h头文件，可以locate signum.h查看。
   9 是 SIGKILL

7, 函数内常量字符串的生存周期。函数内的常量字符串的地址可以全局保存。因为常量是保存在静态只读区。
问题的引入：
看看下面的程序的输出：

#include <stdio.h>
char *returnStr()
{
char *p="hello world!";
return p;
}
int main()
{
char *str=NULL;//一定要初始化，好习惯
str=returnStr();
printf("%s\n", str);

return 0;
}
 

这个没有任何问题，因为"hello world!"是一个字符串常量，存放在静态数据区，
把该字符串常量存放的静态数据区的首地址赋值给了指针，
所以returnStr函数退出时，该该字符串常量所在内存不会被回收，故能够通过指针顺利无误的访问。

8，unsigned float的错误！
对于浮点数来说，浮点数（float，double）实际上都是有符号数，unsigned 和signed前缀不能加在float和double之上，当然就不存在有符号数根无符号数之间转化的问题了
