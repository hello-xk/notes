Learn Linux C



1,list->data = malloc(list->size * sizeof(void *));
    sizeof(void *)表示一个通用指针占用的空间。
    //不同编译器对指针存储的空间不一致，但是都会和void *指针空间相同。
    list->data 存储的是指针，故这样处理。

2,perror(s)
    用来将上一个函数发生错误的原因输出到标准设备(stderr)。参数 s 所指的字符串会先打印出，后面再加上错误原因字符串。此错误原因依照全局变量errno 的值来决定要输出的字符串。
    在库函数中有个errno变量，每个errno值对应着以字符串表示的错误类型。当你调用"某些"函数出错时，该函数已经重新设置了errno的值。perror函数只是将你输入的一些信息和现在的errno所对应的错误一起输出。

3,bzero();
原型：extern void bzero（void *s, int n）;
参数说明：s 要置零的数据的起始地址； n 要置零的数据字节个数。
用法：#include <string.h>
功能：置字节字符串s的前n个字节为零且包括‘\0’。
说明：bzero无返回值，并且使用string.h头文件，string.h曾经是posix标准的一部分，但是在POSIX.1-2001标准里面，这些函数被标记为了遗留函数而不推荐使用。在POSIX.1-2008标准里已经没有这些函数了。推荐使用memset替代bzero。

4,int pthread_mutex_init(&_printlock,NULL);
该函数用于C函数的多线程编程中，互斥锁的初始化。
头文件：#include <pthread.h>
函数原型：int pthread_mutex_init(pthread_mutex_t *restrict mutex,const pthread_mutexattr_t *restrict attr);
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_init()函数是以动态方式创建互斥锁的，参数attr指定了新建互斥锁的属性。如果参数attr为空，则使用默认的互斥锁属性，默认属性为快速互斥锁 。互斥锁的属性在创建锁的时候指定，在LinuxThreads实现中仅有一个锁类型属性，不同的锁类型在试图对一个已经被锁定的互斥锁加锁时表现不同。
pthread_mutexattr_init()函数成功完成之后会返回零，其他任何返回值都表示出现了错误。
函数成功执行后，互斥锁被初始化为未锁住态。//初始状态是：未锁住。

4,len=write(fd,const void *buf,size_t nbytes);
其中，buf为要写入数据所在的内存空间，nbytes为一次写入多少个字节。
换言之，要顺利写完整个buf空间的内容，需要至少一次写入。
所以，调用read/write等函数时，一般都在while里面，并通过每一次返回的不同的值来判断读入/写入过程发生的错误：
len的值：
出错：  -1；
成功：  该次操作写入的字节数,即nbytes的值。not buf.length!

注意： len: 如果nbytes > buf.length,成功时，len=nbytes而不是buf.length!!

例子：
//这是用于读取socket的，不适用于普通文件。因为socket比较特殊。
//local function: write stream (No Buffer I/O)
static inline ssize_t __safe_write(int fd, unsigned char *buf, size_t size) {
    size_t remain = size;
    ssize_t len = 0;
    while (remain > 0) {
        len = write(fd, buf, remain);
        if (len < 0)
            return len; //该次write出错。
        if (len == 0)   //写入完成。
            return size - remain;

        remain -= len;
        buf += len;
    }
    return size;
}
//据说明，remain在4096时效率最高。换言之，一次读/写为4096时效率最高。但是这里没有这样处理。
//这些read/write被叫做不带缓冲IO，这是说，这些IO直接调用底层内核进行IO。缓冲由内核控制。我们可控的是，希望函数一次读写的字节数，该write函数的执行过程，内核可能进行了多次IO以使得write函数返回时返回写入的字节数。

注意： len

