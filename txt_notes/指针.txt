指针：
声明符的类别：
1，以*开头的声明符表指针。如： int *p; 指针声明。
2，以[]结尾的声明符表数组。如： int *p[10];指针数组声明。
3，以()结尾的声明符表函数。如： int *p(int, int);函数声明，省略了形参名。

声明时可以省略形参。定义时不可以省略。

重点： 如何解析 * [] ()的组合。
int *p;
int (*p);
int *p[10];
int (*p)[10];
int *p(int, int);
int (*p)(int, int);
int *(*p)(int, int);
int *(*p[10])(int, int);

规则：
1，定位标识符。上面的是p。
2，从标识符开始解读，根据优先级。[]和()优先于* 最后是类型。
3，以*开头的是指针，以[]结尾的是数组，以()结尾的是函数。先确定变量是指针，数组还是函数。
4，如果是指针，则继续判断指针指向的类型。结果一定是一个指针。
   如果是数组，则继续判断数组的元素类型。结果一定是一个数组。
   如果是函数，则继续判断函数的返回值类型等。结果一定是一个函数。

应用：
int *p;		*与p结合，表p是指针。类型是int型。故是int型指针。
int (*p);	同上。
int *p[10];	[]优先级高于*，故是p[10],即是p是数组，然后看数组的元素类型，*表数组的元素是指针类型。故是int型指针数组。
int (*p)[10];	()导致*p先结合，表p是指针。然后看指针的类型。[10]表指针指向的是一个10个元素的数组。故是int数组指针。
int *p(int, int); ()优先级高于*，故p是函数。然后看这是一个什么函数。可见，是一个返回int指针的有2个参数的函数。p是函数名。
int (*p)(int, int); ()导致*p先结合，表p是指针。然后看指针的类型。(int, int)表p是一个函数指针。故是返回值是int的函数指针。
int *(*p)(int, int); ()导致*p先结合，表p是指针。然后*优先级比()低，故是函数指针。故是返回值是int*的函数指针。
int *(*p[10])(int, int); p与[10]先结合，故是数组。然后看数组的元素，*p[10]是指针数组。然后*优先级比()低，故是函数指针数组。故是返回值是int *的函数指针数组。

总结： 只需记住，解读入口为标识符名，根据优先级解读，*的优先级总是最低的。
===================
解读容易，编写困难！！
1，写一个指针数组。	先写指针，后改为指针数组。
	int *p   ->     int *p[10];
2，写一个数组指针。	先写数组，后该为指针。p是数组变量，再将p改为指针即可。即用小括号让p先和*结合。
	int p[10]  ->   int (*p)[10]
3，写一个函数指针。	先写函数，后改为指针。p是函数名，再将p改为指针即可。即用小括号让p先和*结合。
	int p(int a, int b)  ->  int (*p)(int a, int b)
4，写一个函数指针数组。	先写函数指针，后改为指针数组。 一开始*p是一个指针，让其成为指针数组*p[10]即可。
	int (*p)(int a, int b)  -> int (*p[10])(int a, int b)

编写入口仍旧是标识符名。
1，先写简单的p。如 int p， int *p,  int p[10], int p(int a, int b)
		分别对应    变量， 指针      数组，     函数 
2，根据要求，将变量p进行修改。
		如，需要XXX指针，则在没有*的基础上修改。
				需要int指针，则 int p int基础上，将p变为指针。于是， int *p
				需要指针指针，则 int *p指针基础上，将p变为指针指针。于是，int **p
				需要数组指针，则 int p[10]数组基础上，将p变为指针。于是 int (*p)[10];	//*优先级小于[]，所以要p是指针，要加小括号。		
				需要函数指针，则 int p(int a, int b)函数基础上，将p变为指针。于是 int (*p)XXX
				为了使标识符成功转为指针，需要用小括号先令指针符号*与p结合。
		如，需要XXX数组，则在没有[]的基础上修改。
				需要int数组，则 int p int基础上，将p变为数组。于是，int p[10];
				需要指针数组，则 int *p 指针基础上，将p变为数组。于是，int *p[10];	//[]优先级大于*，所以p就是数组了，不用小括号。
				需要函数数组，则 int p(int a, int b)函数基础上，将p变为数组。于是，int p[10](int a, int b);	//其实函数数组不是这样表达的，而是函数指针数组。这个是错误的！没有这样的表达式。
				需要函数指针数组，则 int (*p)(int a, int b)函数指针基础上，将p变为数组。于是，int (*p[10])XXXX   //[]靠近p。
				注： []数组符号始终是放在标识符的右边。
总结：
	1，写函数数组时，先写函数指针，再将标识符改为数组。
	2，写指针数组时，关键是*优先级比[]低。*是最低优先级的。所以是int *p[10]

另外一种函数数组定义：
typedef void (*callback_func)(int a, void *user_data);		//函数指针的typedef比较特别。
callback_func _cb_funcs[10];		//callback_func只是一种类型，还需要标识符！

相当于 
typedef struct book BOOK;
BOOK books[10];
==========================================================
函数返回值：
1，不能返回数组。
2，不能返回函数。
3，不能返回函数数组。
4，不能返回局部变量的地址。
但是可以返回：
1，可以返回指向数组的指针。
2，可以返回指向函数的指针。
3，可以返回指向函数数组的指针。
4，可以返回静态局部变量的指针。
5，可以返回参数的指针。
6，可以返回局部变量的值。
7，可以返回一切的值。（指针也其实只是一个地址值）

==========================================================
sizeof:
1，对于指针，一般都是4字节/8字节。
2，对于*指针，看指针类型。如果是int则是4字节，如果是结构体，则是结构体空间大小，是数组，则是数组空间大小。
3，对于结构体，是结构体空间。
4，对于数组，是数组空间。长度 * 元素长度。

int *p = malloc(sizeof(int) * 10); 
sizeof(p);  //指针，64位下是8字节。
sizeof(*p); //指针指向，因为类型是int，故是4字节。不能得到malloc的长度！！

struct book *p = {10, "语文"};
sizeof(p);	//指针，64位下是8字节。
sizeof(*p);	//指针指向，因为类型是struct book，故是4+8，为struct book空间大小。
sizeof(p->name); //指针指向，如果字符串使用指针存放，则是8字节。如果字符串使用数组存放，则是数组长度。

int *p[10];
sizeof(p);	//指针数组，数组大小为10 * 8 = 80.
sizeof(&p);	//指针，64位下是8字节。
sizeof(p[0]);	//数组元素，int指针，64位下是8字节。


