Well,what are the differences between follow functions:

       #include <stdlib.h>

       void *malloc(size_t size);
       void free(void *ptr);
       void *calloc(size_t nmemb, size_t size);
       void *realloc(void *ptr, size_t size);

size_t defined in stddef.h,it is long unsigned int

Above functions are defined in stdlib.h
and cstdlib.h in C++.

You can use "man malloc" to show help infomations.

Return Value(返回值):
    分配的空间不够size个也认为是申请空间错误，返回NULL。
    size为0，返回NULL。
    nmemb为0，返回NULL。

    malloc  
            NULL
            a pointer
            分配size个字节，不初始化分配到的空间。
    calloc
            NULL
            a pointer
            分配nmemb个size字节的空间，并初始化分配到的空间为0.
    realloc 
            NULL
            a pointer
            重新分配size个字节到ptr，ptr里旧的内容会被复制到新的空间，并释放旧的空间。
            1，size空间更小。没有资料。可能被截断。
            2，size空间更大。旧的内容复制到新的空间，释放旧的空间。增加的空间不会被初始化。
            3，size为0。相当于free(ptr); 返回NULL。(基本不用）
            4，ptr为NULL。无论size如何，都相当于malloc(size);
            5，因为内存空间不足执行失败时，返回NULL，此时，ptr指向的空间不变。
    free
            void
            释放使用malloc，calloc和realloc分配到的空间。
            1，如果指针指向不是这些函数分配的空间，则出现不可预料的情况。
            2，如果指针为NULL，则该函数什么也不做，不会出现错误吧。

静态内存分配 和 动态内存分配 的区别：
1，分配时刻：
    静态内存分配是在编译阶段分配空间。
    动态内存分配是在运行时执行到时才分配空间。
2，例子：
    静态内存分配：  数组。
    动态内存分配：  链表。

malloc 与 calloc 区别：
1，malloc 分配的是一块内存。每一块内存占用size个字节。
   calloc 分配的是nmemb块内存。每一块内存占用size个字节。
    如： malloc(20 * sizeof(int)) 分配的20*4个字节在一块内存。
         calloc(20, 20 * sizeof(int)) 分配20块，每块为20*4个字节。

2，malloc 分配的空间没有初始化，空间内的内容是垃圾内容。
   calloc 分配空间后并初始化为0.

3，类型转换一定要在函数返回时进行。
    如 int *ptr = (int *)malloc(20 * sizeof(int));
       int *ptr = (int *)malloc(20, 20 * sizeof(int));
  //其实这个没这样的要求，转换和不转换各有好处和坏处。
  //如果没有跨区域，且在当前使用完毕，则可以进行转换。
  

使用realloc内存重新分配函数需要注意的问题：Very Important！

void *realloc(void *ptr, size_t size);

1, 新的空间是否在旧的空间后面创建添加。 

    当情况允许，realloc会在该ptr后面增加一段空间，换言之，空间增大来，ptr的指针也没有发生变化。
    当情况不允许，realloc会新开辟一个空间，然后复制ptr的内容到该空间，并释放ptr指向的旧的空间。换言之，原来ptr指向的空间已经回到堆中，ptr的指针发生变化，指向新开辟的堆的首地址。
    
    这一点导致以下无法通过编译：
    #include <malloc.h> 
    char *p，*q; 
    p = (char * ) malloc (10); 
    q=p; 
    p = (char * ) realloc (p,20); 

    这是因为，万一realloc成功，q则指向了一个已经释放了的空间，一旦引用就会崩溃。
    //但是因为有时realloc返回的p地址并没有变化，即只是单纯扩展，这里的q的引用却不会导致问题，但这种做法确实是个错误的做法！

2，何时对realloc的返回值进行存储。

    p = (int *) realloc (p, sizeof(int) *15);语句有这么一个问题，

    调用前p指向一个已分配成功的内存,而调用realloc时却失败（即返回NULL），此时，p原来指向的内存还没有free掉，而现在又找不到地址，这样就出现memory leak了。

    关于这一点的确要注意，最好如下：
    int *q
    q = (int *) realloc (p, sizeof(int) *15);
    if(!q)
         p =q;

    意思是，在realloc成功后才进行赋值。


    像这种做法是错误的：
    char* p = malloc(1024);
    char* q = realloc(p,2048);    
    当realloc失败时，q==NULL，p没有释放。 

总之，在使用realloc时，最好认为它是开辟了一个新的空间，所以，前后地址是不一致的！
另外，先确保realloc执行成功才进行指针赋值，否则会将返回值NULL赋值给指针而导致内存地址丢失而导致内存泄漏！


最后，不要惧怕动态内存分配函数，其实只要记住一个申请，一个释放即可。

附录：

    //where to release the memory?                                                                                                                        
      pkg->data = malloc(total_length);
      if (!pkg->data) {
          printf("Malloc memory failled.\n");
          return -1;   
      }
      memset(pkg->data, 0, total_length);                                                                                                                   
      memcpy(pkg->data, &val, sizeof(uint32_t));
  
      /* copy data next to return value */                                                                                                                  
      if ((total_length > 0) && pkg->data) {

          unsigned char *ptr = (unsigned char *)pkg->data; 
          ptr += sizeof(uint32_t);  
          memcpy(ptr, data, data_len);
      }












