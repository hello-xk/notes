Vim Shortcuts
可视模式： v
命令模式： esc  （命令模式下直接按键盘，而不是:+命令，后者是vim编辑器的命令）
插入模式:  i a 等等
//meanings			shortcuts
Note: k and K has different meanings.

display current file name:  ctrl+g/:file/:ls/:echo @%(not good)/:set ls=2/
line head:  0
line tail:  $(ctrl+4)
next word head: w
pre word head:  b
下一页：  ctrl + j
上一页：  ctrl + h

delete to line head:    d0
delete to line tail:    d$(d+ctrl+4)

===========================================
indent //缩进
visual mode: > <   right or left move Tab
visual mode ==    auto indent 自动缩进 (选择后，直接按键盘==，而不是:==)
//全选，自动缩进： shift + 0  ==
command mode: n==  n lines indent with upper 多行自动缩进

multi line edit:
    ctrl+v, then j,k,i,I,a,A,o, and so on for edit the multi line

===========================================
编辑： AIRS  append,insert,replace,subsitute (replace是单个替换，subsitute是单个替换，并进入插入模式，所以方便下，可以统一用s就好)
大写字母是shift+字母。
a: 光标后追加。
A: 行尾追加。
i: 光标前插入。
I: 行首插入。
r: 替换光标位置字符。命令模式。
R: 替换光标位置字符，并仍旧处于替换状态，可连续替换。
s: 替换光标位置字符，并进入插入模式。
S: 删除当前行，并进入插入模式，光标自动与上一行缩进。
附加：
o: 往下插入一行，并在行首插入模式。
O: 往上插入一行，并在行首插入模式。
J: 下一行非空内容添加到当前行尾。即将下一行作为本行行尾。

全选： ) 即shift + 0 前者可能是装了某个插件，通用： gg跳到第一行光标最前，v进入可视模式，G跳到光标最后，即实现全选。
取消全选： ( 即shift + 9  通用： 退出可视模式即可。
===========================================
一些有用的：
J： 下一行非空内容添加到当前行尾。
K： 所在单词的手册。所以如果在printf处按caps和k，则会进入printf的手册。

===========================================
search: /search_string Enter  
searchnext: n
searchpre:  N (shift + n)

globalSearch: :vimgrep /search_string/ *.c
jump next:    :cn
jump prev:    :cp
jump curr:    :cc

FullTextSearch: :/\<in\>      search Full Text "in"    \< is convert charactor 

all dir files search:
1,open all files:   :args *.*
2,use upper golobalSearch

======================================================
replace:
1,%s/source/dest/gcp         // %: whole file; /gc is options, g: whole line,c: confirm,p: print one replace result one line;
2,1,20s/source/dest/gcp      //1,20: line1 to line20
3,.,$s/source/dest/gcp       //.,$: current line to file tail
如果在源字符串和目的字符串中出现特殊字符，需要用”\”转义

下面是一些例子：
#将That or this 换成 This or that
:%s/\(That\) or \(this\)/\u\2 or \l\1/
—- 
#将句尾的child换成children
:%s/child\([ ,.;!:?]\)/children\1/g
—-
#将mgi/r/abox换成mgi/r/asquare
:g/mg\([ira]\)box/s//mg//my\1square/g    <=>  :g/mg[ira]box/s/box/square/g
—-
#将多个空格换成一个空格
:%s/  */ /g
—-
#使用空格替换句号或者冒号后面的一个或者多个空格
:%s/\([:.]\)  */\1 /g
—-
#删除所有空行
:g/^$/d
—-
#删除所有的空白行和空行
:g/^[  ][  ]*$/d
—-
#在每行的开始插入两个空白
:%s/^/>  /
—-
#在接下来的6行末尾加入.
:.,5/$/./
—-
#颠倒文件的行序
:g/.*/m0O  <=> :g/^/m0O
—-
#寻找不是数字的开始行,并将其移到文件尾部
:g!/^[0-9]/m$ <=> g/^[^0-9]/m$
—-
#将文件的第12到17行内容复制10词放到当前文件的尾部
:1,10g/^/12,17t$
~~~~重复次数的作用
—-
#将chapter开始行下面的第二行的内容写道begin文件中
:g/^chapter/.+2w>>begin
—-
:/^part2/,/^part3/g/^chapter/.+2w>>begin
—-
:/^part2/,/^part3/g/^chapter/.+2w>>begin|+t$


1,undo 				u
2,redo				ctrl+R
3,delete a line			dd
4,insert after current letter	a
5,insert before current letter 	i
6,delete current letter		x
6.1,replace current letter  s

6.2,insert a line after current line    o
6.3,insert a line before current line   O (shift + o)

7,open file			:e file/path/
7.0,jump file       :bN eg:b2
7.0.1,jump next file/prev file     :bn/bp
7.1,switch files    ctrl+w and tab or ctrl+k and tab

8,see shortcuts     :help keycodes
9,select file       first use k to move to the file list,then use tab to select file,finally click enter

10,jump to next N   fN
10.1,up jump N lines    Nk
10.2,down jump N lines  Nj

text head: 1G(1+shift+g)
text tail: G(shift+g)

11,switch between split windows     ctrl+w  //well,if you want help about windows,just run :help usr_08.txt

12,recording        q //double click get into recording mode,click quit recording mode.

===========================================
Terminal Shortcuts
//meanings            shortcuts

create a new Terminal Tab   ctrl+shift+T
switch Terminal Tabs        ctrl+PageUp/PageDown
switch Tabs                 alt+1~N (very useful)


Other Shortcuts
//meanings              shortcuts

MAX                     ctrl+Win+Up
Normal                  ctrl+Win+Down
Show Desktop            ctrl+Win+D

===========================================
PS:
1,Search String among Files:

:vimgrep /JFactory/ **/*.java
You can replace the pattern /JFactory/ with /\<JFactory\>/ if you want full word match. :vim is shorthand for :vimgrep.

If JFactory or \<JFactory\> is your current search pattern (for example you have hit * on one occurrence) you can use an empty search pattern: :vimgrep // **/*.java, it will use last search pattern instead. Handy!

Warning: :vimgrep will trigger autocmds if enabled. This can slow down the search. If you don't want that you can do:

:noautocmd vimgrep /\<JFactory\>/ **/*.java
which will be quicker. But: it won't trigger syntax highlighting or open gz files ungzipped, etc.

Note that if you want an external program to grep your pattern you can do something like the following:

:set grepprg=ack
:grep --java JFactory
Ack is a Perl-written alternative to grep. Note that then, you will have to switch to Perl regexes.

Once the command of your choice returned, you can browse the search results with those commands described in the Vim documentation at :help quickfix. Lookup :cfirst, :cnext, :cprevious, :cnfile, etc.
